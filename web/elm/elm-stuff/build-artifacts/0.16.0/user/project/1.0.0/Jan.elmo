Elm.Jan = Elm.Jan || {};
Elm.Jan.make = function (_elm) {
   "use strict";
   _elm.Jan = _elm.Jan || {};
   if (_elm.Jan.values) return _elm.Jan.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Action = Elm.Action.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Mailbox = Elm.Mailbox.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $View = Elm.View.make(_elm);
   var _op = {};
   var newGamePort = Elm.Native.Port.make(_elm).outboundSignal("newGamePort",function (v) {    return [];},$Mailbox.newGameMailbox.signal);
   var chooseWeaponPort = Elm.Native.Port.make(_elm).outboundSignal("chooseWeaponPort",function (v) {    return v;},$Mailbox.chooseWeaponMailbox.signal);
   var resetGamePort = Elm.Native.Port.make(_elm).inboundSignal("resetGamePort",
   "()",
   function (v) {
      return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple0"} : _U.badPort("an array",v);
   });
   var currentPlayerPort = Elm.Native.Port.make(_elm).inboundSignal("currentPlayerPort",
   "String",
   function (v) {
      return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",v);
   });
   var resultFoundPort = Elm.Native.Port.make(_elm).inboundSignal("resultFoundPort",
   "String",
   function (v) {
      return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",v);
   });
   var playersPort = Elm.Native.Port.make(_elm).inboundSignal("playersPort",
   "List Model.Player",
   function (v) {
      return typeof v === "object" && v instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.map(function (v) {
         return typeof v === "object" && "name" in v && "weapon" in v && "score" in v ? {_: {}
                                                                                        ,name: typeof v.name === "string" || typeof v.name === "object" && v.name instanceof String ? v.name : _U.badPort("a string",
                                                                                        v.name)
                                                                                        ,weapon: typeof v.weapon === "string" || typeof v.weapon === "object" && v.weapon instanceof String ? v.weapon : _U.badPort("a string",
                                                                                        v.weapon)
                                                                                        ,score: typeof v.score === "number" && isFinite(v.score) && Math.floor(v.score) === v.score ? v.score : _U.badPort("an integer",
                                                                                        v.score)} : _U.badPort("an object with fields `name`, `weapon`, `score`",
         v);
      })) : _U.badPort("an array",v);
   });
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "NoOp": return model;
         case "PlayersChanged": return _U.update(model,{players: _p0._0});
         case "DefineCurrentPlayer": return _U.update(model,{currentPlayer: _p0._0});
         case "ShowResult": return _U.update(model,{resultMessage: _p0._0});
         default: return _U.update(model,{resultMessage: ""});}
   });
   var initialModel = {possibleWeapons: _U.list(["Rock","Paper","Scissors"]),players: _U.list([]),resultMessage: "",currentPlayer: ""};
   var actions = $Signal.mergeMany(_U.list([$Mailbox.inbox.signal
                                           ,A2($Signal.map,$Action.PlayersChanged,playersPort)
                                           ,A2($Signal.map,$Action.DefineCurrentPlayer,currentPlayerPort)
                                           ,A2($Signal.map,function (_p1) {    return $Action.ResetGame;},resetGamePort)
                                           ,A2($Signal.map,$Action.ShowResult,resultFoundPort)]));
   var model = A3($Signal.foldp,update,initialModel,actions);
   var main = A2($Signal.map,$View.view($Mailbox.inbox.address),model);
   return _elm.Jan.values = {_op: _op,main: main,actions: actions,model: model,initialModel: initialModel,update: update};
};